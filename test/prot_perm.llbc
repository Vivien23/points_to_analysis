{"charon_version":"0.1.71","translated":{"crate_name":"prot_perm","real_crate_name":"prot_perm","options":{"ullbc":false,"lib":false,"bin":null,"mir_promoted":false,"mir_optimized":false,"crate_name":null,"input_file":null,"read_llbc":null,"dest_dir":null,"dest_file":null,"use_polonius":false,"skip_borrowck":false,"no_code_duplication":false,"extract_opaque_bodies":false,"translate_all_methods":false,"include":[],"opaque":[],"exclude":[],"remove_associated_types":[],"hide_marker_traits":false,"no_cargo":false,"rustc_args":[],"cargo_args":[],"abort_on_error":false,"error_on_warnings":false,"no_serialize":false,"print_original_ullbc":false,"print_ullbc":false,"print_built_llbc":false,"print_llbc":false,"no_merge_goto_chains":false},"all_ids":[{"Fun":0},{"Fun":1},{"Type":0},{"Type":1},{"Fun":2},{"TraitDecl":0},{"TraitDecl":1},{"TraitImpl":0},{"Fun":3},{"Fun":4},{"Fun":5},{"Type":2},{"Type":3},{"Type":4},{"Fun":6}],"item_names":[{"key":{"TraitDecl":0},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Sized",0]}]},{"key":{"Fun":3},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Impl":[{"Ty":{"params":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":[{"Adt":0},{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]},"kind":"InherentImplBlock"}},2]},{"Ident":["new_v1",0]}]},{"key":{"Type":4},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Error",0]}]},{"key":{"Fun":4},"value":[{"Ident":["std",0]},{"Ident":["io",0]},{"Ident":["stdio",0]},{"Ident":["_print",0]}]},{"key":{"Type":1},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Ident":["Argument",0]}]},{"key":{"TraitDecl":1},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Display",0]}]},{"key":{"Type":2},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Formatter",0]}]},{"key":{"Type":3},"value":[{"Ident":["core",0]},{"Ident":["result",0]},{"Ident":["Result",0]}]},{"key":{"TraitImpl":0},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["num",0]},{"Ident":["imp",0]},{"Impl":[{"Trait":0},2]}]},{"key":{"Type":0},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Arguments",0]}]},{"key":{"Fun":2},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Impl":[{"Ty":{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":[{"Adt":1},{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]},"kind":"InherentImplBlock"}},1]},{"Ident":["new_display",0]}]},{"key":{"Fun":1},"value":[{"Ident":["prot_perm",0]},{"Ident":["ub",0]}]},{"key":{"Fun":5},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Display",0]},{"Ident":["fmt",0]}]},{"key":{"Fun":6},"value":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["num",0]},{"Ident":["imp",0]},{"Impl":[{"Trait":0},2]},{"Ident":["fmt",0]}]},{"key":{"Fun":0},"value":[{"Ident":["prot_perm",0]},{"Ident":["main",0]}]}],"files":[{"name":{"Local":"src/prot_perm.rs"},"contents":"fn main() {\n    let x = 0;\n    // If we do the following, it doesn't compile with error \"assigning to `&T` is undefined behavior\"\n    //let y: *const String = & x;\n    //let y = y as *mut _;\n    //unsafe{*y = String::from(\"World\")};\n\n    // But it's okay if we hide it in a function\n    ub (&x);\n    println!(\"{x}\");\n}\n\nfn ub(arg :*const u8) {\n    let arg = arg as *mut _;\n    unsafe{*arg = 1};\n}"},{"name":{"Virtual":"/rustc/library/std/src/macros.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/fmt/mod.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/lib.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/fmt/rt.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/marker.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/fmt/num.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/std/src/io/stdio.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/std/src/lib.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/std/src/io/mod.rs"},"contents":null},{"name":{"Virtual":"/rustc/library/core/src/result.rs"},"contents":null}],"type_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Arguments",0]}],"span":{"span":{"file_id":2,"beg":{"line":319,"col":0},"end":{"line":319,"col":24}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" This structure represents a safely precompiled version of a format string"},{"DocComment":" and its arguments. This cannot be generated at runtime because it cannot"},{"DocComment":" safely be done, so no constructors are given and the fields are private"},{"DocComment":" to prevent modification."},{"DocComment":""},{"DocComment":" The [`format_args!`] macro will safely create an instance of this structure."},{"DocComment":" The macro validates the format string at compile-time so usage of the"},{"DocComment":" [`write()`] and [`format()`] functions can be safely performed."},{"DocComment":""},{"DocComment":" You can use the `Arguments<'a>` that [`format_args!`] returns in `Debug`"},{"DocComment":" and `Display` contexts as seen below. The example also shows that `Debug`"},{"DocComment":" and `Display` format to the same thing: the interpolated format string"},{"DocComment":" in `format_args!`."},{"DocComment":""},{"DocComment":" ```rust"},{"DocComment":" let debug = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));"},{"DocComment":" let display = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));"},{"DocComment":" assert_eq!(\"1 foo 2\", display);"},{"DocComment":" assert_eq!(display, debug);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [`format()`]: ../../std/fmt/fn.format.html"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"format_arguments"},"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[{"regions":[],"skip_binder":[{"Var":{"Free":0}},{"Var":{"Free":0}}]}],"types_outlive":[],"trait_type_constraints":[]},"kind":"Opaque"},{"def_id":1,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Ident":["Argument",0]}],"span":{"span":{"file_id":4,"beg":{"line":92,"col":0},"end":{"line":92,"col":23}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"format_argument"},"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":"Opaque"},{"def_id":2,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Formatter",0]}],"span":{"span":{"file_id":2,"beg":{"line":262,"col":0},"end":{"line":262,"col":24}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Configuration for formatting."},{"DocComment":""},{"DocComment":" A `Formatter` represents various options related to formatting. Users do not"},{"DocComment":" construct `Formatter`s directly; a mutable reference to one is passed to"},{"DocComment":" the `fmt` method of all formatting traits, like [`Debug`] and [`Display`]."},{"DocComment":""},{"DocComment":" To interact with a `Formatter`, you'll call various methods to change the"},{"DocComment":" various options related to formatting. For examples, please see the"},{"DocComment":" documentation of the methods defined on `Formatter` below."},{"Unknown":{"path":"rustc_diagnostic_item","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Formatter"},"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[{"regions":[],"skip_binder":[{"Var":{"Free":0}},{"Var":{"Free":0}}]}],"types_outlive":[],"trait_type_constraints":[]},"kind":"Opaque"},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["result",0]},{"Ident":["Result",0]}],"span":{"span":{"file_id":10,"beg":{"line":527,"col":0},"end":{"line":527,"col":21}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`])."},{"DocComment":""},{"DocComment":" See the [module documentation](self) for details."},{"Unknown":{"path":"must_use","args":null}},{"Unknown":{"path":"rustc_diagnostic_item","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Result"},"generics":{"regions":[],"types":[{"index":0,"name":"T"},{"index":1,"name":"E"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":10,"beg":{"line":527,"col":16},"end":{"line":527,"col":17}},"generated_from_span":null},"origin":"WhereClauseOnType","trait_":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}},{"clause_id":1,"span":{"span":{"file_id":10,"beg":{"line":527,"col":19},"end":{"line":527,"col":20}},"generated_from_span":null},"origin":"WhereClauseOnType","trait_":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Enum":[{"span":{"span":{"file_id":10,"beg":{"line":531,"col":4},"end":{"line":531,"col":6}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Contains the success value"}],"inline":null,"rename":null,"public":true},"name":"Ok","fields":[{"span":{"span":{"file_id":10,"beg":{"line":531,"col":53},"end":{"line":531,"col":54}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":0}}}],"discriminant":{"Isize":"0"}},{"span":{"span":{"file_id":10,"beg":{"line":536,"col":4},"end":{"line":536,"col":7}},"generated_from_span":null},"attr_info":{"attributes":[{"DocComment":" Contains the error value"}],"inline":null,"rename":null,"public":true},"name":"Err","fields":[{"span":{"span":{"file_id":10,"beg":{"line":536,"col":54},"end":{"line":536,"col":55}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":null,"ty":{"TypeVar":{"Free":1}}}],"discriminant":{"Isize":"1"}}]}},{"def_id":4,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Error",0]}],"span":{"span":{"file_id":2,"beg":{"line":103,"col":0},"end":{"line":103,"col":16}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The error type which is returned from formatting a message into a stream."},{"DocComment":""},{"DocComment":" This type does not support transmission of an error other than that an error"},{"DocComment":" occurred. This is because, despite the existence of this error,"},{"DocComment":" string formatting is considered an infallible operation."},{"DocComment":" `fmt()` implementors should not return this `Error` unless they received it from their"},{"DocComment":" [`Formatter`]. The only time your code should create a new instance of this"},{"DocComment":" error is when implementing `fmt::Write`, in order to cancel the formatting operation when"},{"DocComment":" writing to the underlying stream fails."},{"DocComment":""},{"DocComment":" Any extra information must be arranged to be transmitted through some other means,"},{"DocComment":" such as storing it in a field to be consulted after the formatting operation has been"},{"DocComment":" cancelled. (For example, this is how [`std::io::Write::write_fmt()`] propagates IO errors"},{"DocComment":" during writing.)"},{"DocComment":""},{"DocComment":" This type, `fmt::Error`, should not be"},{"DocComment":" confused with [`std::io::Error`] or [`std::error::Error`], which you may also"},{"DocComment":" have in scope."},{"DocComment":""},{"DocComment":" [`std::io::Error`]: ../../std/io/struct.Error.html"},{"DocComment":" [`std::io::Write::write_fmt()`]: ../../std/io/trait.Write.html#method.write_fmt"},{"DocComment":" [`std::error::Error`]: ../../std/error/trait.Error.html"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```rust"},{"DocComment":" use std::fmt::{self, write};"},{"DocComment":""},{"DocComment":" let mut output = String::new();"},{"DocComment":" if let Err(fmt::Error) = write(&mut output, format_args!(\"Hello {}!\", \"world\")) {"},{"DocComment":"     panic!(\"An error occurred\");"},{"DocComment":" }"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"kind":{"Struct":[]}}],"fun_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["prot_perm",0]},{"Ident":["main",0]}],"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":11,"col":1}},"generated_from_span":null},"source_text":"fn main() {\n    let x = 0;\n    // If we do the following, it doesn't compile with error \"assigning to `&T` is undefined behavior\"\n    //let y: *const String = & x;\n    //let y = y as *mut _;\n    //unsafe{*y = String::from(\"World\")};\n\n    // But it's okay if we hide it in a function\n    ub (&x);\n    println!(\"{x}\");\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},"kind":"Regular","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":11,"col":1}},"generated_from_span":null},"locals":{"arg_count":0,"vars":[{"index":0,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":1,"name":"x","ty":{"Literal":{"Integer":"U8"}}},{"index":2,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":3,"name":null,"ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}},{"index":4,"name":null,"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}},{"index":5,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":6,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":7,"name":null,"ty":{"Adt":[{"Adt":0},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}},{"index":8,"name":null,"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},{"index":9,"name":null,"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},{"index":10,"name":null,"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]}},{"index":11,"name":null,"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},{"index":12,"name":null,"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},{"index":13,"name":null,"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]}},{"index":14,"name":null,"ty":{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}},{"index":15,"name":null,"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}},{"index":16,"name":null,"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}}]},"comments":[[7,["If we do the following, it doesn't compile with error \"assigning to `&T` is undefined behavior\"","let y: *const String = & x;","let y = y as *mut _;","unsafe{*y = String::from(\"World\")};"]],[9,["But it's okay if we hide it in a function"]]],"body":{"span":{"span":{"file_id":0,"beg":{"line":1,"col":10},"end":{"line":11,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":2,"col":12},"end":{"line":2,"col":13}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":1},"ty":{"Literal":{"Integer":"U8"}}},{"Use":{"Const":{"value":{"Literal":{"Scalar":{"U8":"0"}}},"ty":{"Literal":{"Integer":"U8"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":2,"col":8},"end":{"line":2,"col":9}},"generated_from_span":null},"content":{"FakeRead":{"kind":{"Base":1},"ty":{"Literal":{"Integer":"U8"}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":8},"end":{"line":9,"col":10}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":4},"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}},{"Ref":[{"kind":{"Base":1},"ty":{"Literal":{"Integer":"U8"}}},"Shared"]}]},"comments_before":["If we do the following, it doesn't compile with error \"assigning to `&T` is undefined behavior\"","let y: *const String = & x;","let y = y as *mut _;","unsafe{*y = String::from(\"World\")};","But it's okay if we hide it in a function"]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":8},"end":{"line":9,"col":10}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":3},"ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}},{"RawPtr":[{"kind":{"Projection":[{"kind":{"Base":4},"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}},"Deref"]},"ty":{"Literal":{"Integer":"U8"}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":4},"end":{"line":9,"col":11}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":1}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Fun":1}}}}},"args":[{"Move":{"kind":{"Base":3},"ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}}}],"dest":{"kind":{"Base":2},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":10},"end":{"line":9,"col":11}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":3},"ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":11},"end":{"line":9,"col":12}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":4},"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":9,"col":11},"end":{"line":9,"col":12}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":2},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":10,"col":13},"end":{"line":10,"col":18}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":10},"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Array":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]},{"Value":{"Scalar":{"Usize":"2"}}}]},[{"Const":{"value":{"Literal":{"Str":""}},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}}},{"Const":{"value":{"Literal":{"Str":"\n"}},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":10,"col":13},"end":{"line":10,"col":18}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":9},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},{"Ref":[{"kind":{"Base":10},"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":10,"col":13},"end":{"line":10,"col":18}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":8},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Base":9},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},"Deref"]},"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":10,"col":14},"end":{"line":10,"col":17}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":16},"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}},{"Ref":[{"kind":{"Base":1},"ty":{"Literal":{"Integer":"U8"}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":10,"col":14},"end":{"line":10,"col":17}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":15},"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Base":16},"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}},"Deref"]},"ty":{"Literal":{"Integer":"U8"}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":10,"col":14},"end":{"line":10,"col":17}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":2}},"generics":{"regions":["Erased","Erased"],"types":[{"Literal":{"Integer":"U8"}}],"const_generics":[],"trait_refs":[{"kind":{"BuiltinOrAuto":{"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Literal":{"Integer":"U8"}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}},"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Literal":{"Integer":"U8"}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}},{"kind":{"TraitImpl":[0,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitImpl":0}}}]},"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":1,"generics":{"regions":[],"types":[{"Literal":{"Integer":"U8"}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}}}}],"target":{"Item":{"Fun":2}}}}},"args":[{"Move":{"kind":{"Base":15},"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}}}],"dest":{"kind":{"Base":14},"ty":{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":10,"col":16},"end":{"line":10,"col":17}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":15},"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":13},"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Array":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]},{"Value":{"Scalar":{"Usize":"1"}}}]},[{"Move":{"kind":{"Base":14},"ty":{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":14},"ty":{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":12},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},{"Ref":[{"kind":{"Base":13},"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":11},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Base":12},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}},"Deref"]},"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":27},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":3}},"generics":{"regions":["Erased"],"types":[],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}},{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":{"Item":{"Fun":3}}}}},"args":[{"Move":{"kind":{"Base":8},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}}},{"Move":{"kind":{"Base":11},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}}}],"dest":{"kind":{"Base":7},"ty":{"Adt":[{"Adt":0},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":11},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":59},"end":{"line":143,"col":60}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":8},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":8},"end":{"line":143,"col":61}},"generated_from_span":null},"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":4}},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Fun":4}}}}},"args":[{"Move":{"kind":{"Base":7},"ty":{"Adt":[{"Adt":0},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}}}],"dest":{"kind":{"Base":6},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":60},"end":{"line":143,"col":61}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":7},"ty":{"Adt":[{"Adt":0},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":16},"ty":{"Ref":["Erased",{"Literal":{"Integer":"U8"}},"Shared"]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":13},"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":12},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Value":{"Scalar":{"Usize":"1"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":10},"ty":{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":9},"ty":{"Ref":["Erased",{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Erased",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Value":{"Scalar":{"Usize":"2"}}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":143,"col":61},"end":{"line":143,"col":62}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":6},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":144,"col":4},"end":{"line":144,"col":5}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":5},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":1,"col":10},"end":{"line":11,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":11,"col":0},"end":{"line":11,"col":1}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":1},"ty":{"Literal":{"Integer":"U8"}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":11,"col":1},"end":{"line":11,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":11,"col":1},"end":{"line":11,"col":1}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":1,"item_meta":{"name":[{"Ident":["prot_perm",0]},{"Ident":["ub",0]}],"span":{"span":{"file_id":0,"beg":{"line":13,"col":0},"end":{"line":16,"col":1}},"generated_from_span":null},"source_text":"fn ub(arg :*const u8) {\n    let arg = arg as *mut _;\n    unsafe{*arg = 1};\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}],"output":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},"kind":"Regular","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":13,"col":0},"end":{"line":16,"col":1}},"generated_from_span":null},"locals":{"arg_count":1,"vars":[{"index":0,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"index":1,"name":"arg","ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}},{"index":2,"name":"arg","ty":{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}},{"index":3,"name":null,"ty":{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}},{"index":4,"name":null,"ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}},{"index":5,"name":null,"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":13,"col":22},"end":{"line":16,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":14,"col":14},"end":{"line":14,"col":17}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":4},"ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}},{"Use":{"Copy":{"kind":{"Base":1},"ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":14,"col":14},"end":{"line":14,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":3},"ty":{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}},{"UnaryOp":[{"Cast":{"RawPtr":[{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]},{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}]}},{"Move":{"kind":{"Base":4},"ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":14,"col":14},"end":{"line":14,"col":27}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":2},"ty":{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}},{"Use":{"Copy":{"kind":{"Base":3},"ty":{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":14,"col":26},"end":{"line":14,"col":27}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":4},"ty":{"RawPtr":[{"Literal":{"Integer":"U8"}},"Shared"]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":14,"col":8},"end":{"line":14,"col":11}},"generated_from_span":null},"content":{"FakeRead":{"kind":{"Base":2},"ty":{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":14,"col":27},"end":{"line":14,"col":28}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":3},"ty":{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":15,"col":11},"end":{"line":15,"col":19}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Projection":[{"kind":{"Base":2},"ty":{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}},"Deref"]},"ty":{"Literal":{"Integer":"I32"}}},{"Use":{"Const":{"value":{"Literal":{"Scalar":{"I32":"1"}}},"ty":{"Literal":{"Integer":"I32"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":15,"col":20},"end":{"line":15,"col":21}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":5},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":13,"col":22},"end":{"line":16,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":16,"col":0},"end":{"line":16,"col":1}},"generated_from_span":null},"content":{"Drop":{"kind":{"Base":2},"ty":{"RawPtr":[{"Literal":{"Integer":"I32"}},"Mut"]}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":16,"col":1},"end":{"line":16,"col":1}},"generated_from_span":null},"content":{"Assign":[{"kind":{"Base":0},"ty":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},{"Aggregate":[{"Adt":["Tuple",null,null,{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":16,"col":1},"end":{"line":16,"col":1}},"generated_from_span":null},"content":"Return","comments_before":[]}]}}}}},{"def_id":2,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["rt",0]},{"Impl":[{"Ty":{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":[{"Adt":1},{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]},"kind":"InherentImplBlock"}},1]},{"Ident":["new_display",0]}],"span":{"span":{"file_id":4,"beg":{"line":113,"col":4},"end":{"line":113,"col":57}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":"Always","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[{"index":0,"name":"T"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":4,"beg":{"line":113,"col":23},"end":{"line":113,"col":24}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}},{"clause_id":1,"span":{"span":{"file_id":4,"beg":{"line":113,"col":26},"end":{"line":113,"col":33}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"trait_id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":1}},{"TypeVar":{"Free":0}},"Shared"]}],"output":{"Adt":[{"Adt":1},{"regions":[{"Var":{"Free":1}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}},"kind":"Regular","is_global_initializer":null,"body":{"Err":null}},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Impl":[{"Ty":{"params":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"Adt":[{"Adt":0},{"regions":[{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]},"kind":"InherentImplBlock"}},2]},{"Ident":["new_v1",0]}],"span":{"span":{"file_id":2,"beg":{"line":345,"col":4},"end":{"line":348,"col":22}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" When using the format_args!() macro, this function is used to generate the"},{"DocComment":" Arguments structure."}],"inline":"Hint","rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[{"index":0,"name":"'a"}],"types":[],"const_generics":[{"index":0,"name":"P","ty":{"Integer":"Usize"}},{"index":1,"name":"A","ty":{"Integer":"Usize"}}],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Ref":["Static",{"Adt":[{"Builtin":"Str"},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"const_generics":[{"Var":{"Free":0}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]},{"Ref":[{"Var":{"Free":0}},{"Adt":[{"Builtin":"Array"},{"regions":[],"types":[{"Adt":[{"Adt":1},{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":1}}}]}],"const_generics":[{"Var":{"Free":1}}],"trait_refs":[],"target":"Builtin"}]},"Shared"]}],"output":{"Adt":[{"Adt":0},{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}},"kind":"Regular","is_global_initializer":null,"body":{"Err":null}},{"def_id":4,"item_meta":{"name":[{"Ident":["std",0]},{"Ident":["io",0]},{"Ident":["stdio",0]},{"Ident":["_print",0]}],"span":{"span":{"file_id":7,"beg":{"line":1231,"col":0},"end":{"line":1231,"col":39}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"unstable","args":"feature = \"print_internals\", reason =\n\"implementation detail which may disappear or be replaced at any time\", issue\n= \"none\""}},{"Unknown":{"path":"doc","args":"hidden"}},{"Unknown":{"path":"cfg","args":"not(test)"}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":[{"Adt":0},{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":0}}}]}],"output":{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}},"kind":"Regular","is_global_initializer":null,"body":{"Err":null}},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Display",0]},{"Ident":["fmt",0]}],"span":{"span":{"file_id":2,"beg":{"line":749,"col":4},"end":{"line":749,"col":51}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"Unknown":{"path":"doc","args":null}},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::fmt;"},{"DocComment":""},{"DocComment":" struct Position {"},{"DocComment":"     longitude: f32,"},{"DocComment":"     latitude: f32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl fmt::Display for Position {"},{"DocComment":"     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"},{"DocComment":"         write!(f, \"({}, {})\", self.longitude, self.latitude)"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert_eq!("},{"DocComment":"     \"(1.987, 2.983)\","},{"DocComment":"     format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }),"},{"DocComment":" );"},{"DocComment":" ```"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null}],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"Adt":[{"Adt":2},{"regions":[{"Var":{"Free":2}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]},"Mut"]}],"output":{"Adt":[{"Adt":3},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},{"Adt":[{"Adt":4},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":4}}}]}],"const_generics":[],"trait_refs":[{"kind":{"BuiltinOrAuto":{"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}},"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}},{"kind":{"BuiltinOrAuto":{"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":[{"Adt":4},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":4}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}},"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":[{"Adt":4},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":4}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}}],"target":{"Item":{"Type":3}}}]}},"kind":{"TraitDecl":{"trait_ref":{"trait_id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}},"item_name":"fmt","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":6,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["num",0]},{"Ident":["imp",0]},{"Impl":[{"Trait":0},2]},{"Ident":["fmt",0]}],"span":{"span":{"file_id":6,"beg":{"line":204,"col":12},"end":{"line":204,"col":68}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"is_closure":false,"closure_info":null,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"Literal":{"Integer":"U8"}},"Shared"]},{"Ref":[{"Var":{"Free":1}},{"Adt":[{"Adt":2},{"regions":[{"Var":{"Free":2}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":2}}}]},"Mut"]}],"output":{"Adt":[{"Adt":3},{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]},{"Adt":[{"Adt":4},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":4}}}]}],"const_generics":[],"trait_refs":[{"kind":{"BuiltinOrAuto":{"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}},"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":["Tuple",{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":"Builtin"}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}},{"kind":{"BuiltinOrAuto":{"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":[{"Adt":4},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":4}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}},"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"trait_id":0,"generics":{"regions":[],"types":[{"Adt":[{"Adt":4},{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Type":4}}}]}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":0}}}}}}],"target":{"Item":{"Type":3}}}]}},"kind":{"TraitImpl":{"impl_ref":{"impl_id":0,"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitImpl":0}}}},"trait_ref":{"trait_id":1,"generics":{"regions":[],"types":[{"Literal":{"Integer":"U8"}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}},"item_name":"fmt","reuses_default":true}},"is_global_initializer":null,"body":{"Err":null}}],"global_decls":[],"trait_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Sized",0]}],"span":{"span":{"file_id":5,"beg":{"line":146,"col":0},"end":{"line":146,"col":15}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Types with a constant size known at compile time."},{"DocComment":""},{"DocComment":" All type parameters have an implicit bound of `Sized`. The special syntax"},{"DocComment":" `?Sized` can be used to remove this bound if it's not appropriate."},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(dead_code)]"},{"DocComment":" struct Foo<T>(T);"},{"DocComment":" struct Bar<T: ?Sized>(T);"},{"DocComment":""},{"DocComment":" // struct FooUse(Foo<[i32]>); // error: Sized is not implemented for [i32]"},{"DocComment":" struct BarUse(Bar<[i32]>); // OK"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The one exception is the implicit `Self` type of a trait. A trait does not"},{"DocComment":" have an implicit `Sized` bound as this is incompatible with [trait object]s"},{"DocComment":" where, by definition, the trait needs to work with all possible implementors,"},{"DocComment":" and thus could be any size."},{"DocComment":""},{"DocComment":" Although Rust will let you bind `Sized` to a trait, you won't"},{"DocComment":" be able to use it to form a trait object later:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(unused_variables)]"},{"DocComment":" trait Foo { }"},{"DocComment":" trait Bar: Sized { }"},{"DocComment":""},{"DocComment":" struct Impl;"},{"DocComment":" impl Foo for Impl { }"},{"DocComment":" impl Bar for Impl { }"},{"DocComment":""},{"DocComment":" let x: &dyn Foo = &Impl;    // OK"},{"DocComment":" // let y: &dyn Bar = &Impl; // error: the trait `Bar` cannot"},{"DocComment":"                             // be made into an object"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [trait object]: ../../book/ch17-02-trait-objects.html"},{"Unknown":{"path":"doc","args":"alias = \"?\", alias = \"?Sized\""}},{"Unknown":{"path":"diagnostic::on_unimplemented","args":"message =\n\"the size for values of type `{Self}` cannot be known at compilation time\",\nlabel = \"doesn't have a size known at compile-time\""}},{"Unknown":{"path":"fundamental","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"sized"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[]},{"def_id":1,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["Display",0]}],"span":{"span":{"file_id":2,"beg":{"line":724,"col":0},"end":{"line":724,"col":17}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Format trait for an empty format, `{}`."},{"DocComment":""},{"DocComment":" Implementing this trait for a type will automatically implement the"},{"DocComment":" [`ToString`][tostring] trait for the type, allowing the usage"},{"DocComment":" of the [`.to_string()`][tostring_function] method. Prefer implementing"},{"DocComment":" the `Display` trait for a type, rather than [`ToString`][tostring]."},{"DocComment":""},{"DocComment":" `Display` is similar to [`Debug`], but `Display` is for user-facing"},{"DocComment":" output, and so cannot be derived."},{"DocComment":""},{"DocComment":" For more information on formatters, see [the module-level documentation][module]."},{"DocComment":""},{"DocComment":" [module]: ../../std/fmt/index.html"},{"DocComment":" [tostring]: ../../std/string/trait.ToString.html"},{"DocComment":" [tostring_function]: ../../std/string/trait.ToString.html#tymethod.to_string"},{"DocComment":""},{"DocComment":" # Internationalization"},{"DocComment":""},{"DocComment":" Because a type can only have one `Display` implementation, it is often preferable"},{"DocComment":" to only implement `Display` when there is a single most \"obvious\" way that"},{"DocComment":" values can be formatted as text. This could mean formatting according to the"},{"DocComment":" \"invariant\" culture and \"undefined\" locale, or it could mean that the type"},{"DocComment":" display is designed for a specific culture/locale, such as developer logs."},{"DocComment":""},{"DocComment":" If not all values have a justifiably canonical textual format or if you want"},{"DocComment":" to support alternative formats not covered by the standard set of possible"},{"DocComment":" [formatting traits], the most flexible approach is display adapters: methods"},{"DocComment":" like [`str::escape_default`] or [`Path::display`] which create a wrapper"},{"DocComment":" implementing `Display` to output the specific display format."},{"DocComment":""},{"DocComment":" [formatting traits]: ../../std/fmt/index.html#formatting-traits"},{"DocComment":" [`Path::display`]: ../../std/path/struct.Path.html#method.display"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" Implementing `Display` on a type:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" use std::fmt;"},{"DocComment":""},{"DocComment":" struct Point {"},{"DocComment":"     x: i32,"},{"DocComment":"     y: i32,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl fmt::Display for Point {"},{"DocComment":"     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"},{"DocComment":"         write!(f, \"({}, {})\", self.x, self.y)"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let origin = Point { x: 0, y: 0 };"},{"DocComment":""},{"DocComment":" assert_eq!(format!(\"The origin is: {origin}\"), \"The origin is: (0, 0)\");"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(any(_Self = \"std::path::Path\", _Self = \"std::path::PathBuf\"), label =\n\"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\",\nnote =\n\"call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data\"),\nmessage = \"`{Self}` doesn't implement `{Display}`\", label =\n\"`{Self}` cannot be formatted with the default formatter\", note =\n\"in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead\""}},{"Unknown":{"path":"doc","args":"alias = \"{}\""}},{"Unknown":{"path":"rustc_diagnostic_item","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"Display"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["fmt",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":5,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}},{"Var":{"Bound":[0,2]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"Fun":5}}}},"kind":{"TraitMethod":[1,"fmt"]}}]]}],"trait_impls":[{"def_id":0,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["fmt",0]},{"Ident":["num",0]},{"Ident":["imp",0]},{"Impl":[{"Trait":0},2]}],"span":{"span":{"file_id":6,"beg":{"line":203,"col":8},"end":{"line":203,"col":32}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"impl_trait":{"trait_id":1,"generics":{"regions":[],"types":[{"Literal":{"Integer":"U8"}}],"const_generics":[],"trait_refs":[],"target":{"Item":{"TraitDecl":1}}}},"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[],"consts":[],"types":[],"type_clauses":[],"methods":[["fmt",{"params":{"regions":[{"index":0,"name":null},{"index":1,"name":null},{"index":2,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":6,"generics":{"regions":[{"Var":{"Bound":[0,0]}},{"Var":{"Bound":[0,1]}},{"Var":{"Bound":[0,2]}}],"types":[],"const_generics":[],"trait_refs":[],"target":{"Item":{"Fun":6}}}},"kind":{"TraitMethod":[1,"fmt"]}}]]}],"ordered_decls":[{"Type":{"NonRec":0}},{"Type":{"NonRec":1}},{"Fun":{"NonRec":1}},{"TraitDecl":{"NonRec":0}},{"Type":{"NonRec":2}},{"Type":{"NonRec":3}},{"Type":{"NonRec":4}},{"TraitDecl":{"NonRec":1}},{"Fun":{"NonRec":2}},{"Fun":{"NonRec":6}},{"TraitImpl":{"NonRec":0}},{"Fun":{"NonRec":3}},{"Fun":{"NonRec":4}},{"Fun":{"NonRec":0}},{"Fun":{"NonRec":5}}]}}